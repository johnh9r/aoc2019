defmodule FlawedFreqTxTest do
  use ExUnit.Case
  doctest FlawedFreqTx

  setup do
    my_message = "59719811742386712072322509550573967421647565332667367184388997335292349852954113343804787102604664096288440135472284308373326245877593956199225516071210882728614292871131765110416999817460140955856338830118060988497097324334962543389288979535054141495171461720836525090700092901849537843081841755954360811618153200442803197286399570023355821961989595705705045742262477597293974158696594795118783767300148414702347570064139665680516053143032825288231685962359393267461932384683218413483205671636464298057303588424278653449749781937014234119757220011471950196190313903906218080178644004164122665292870495547666700781057929319060171363468213087408071790"

    [
      message: my_message,
      iterations: 100
    ]
  end

  @tag :challenge_pt1
  test "(part 1) correctly processes personal challenge data", context do
    result =
      context[:message]
      |> FlawedFreqTx.run_flawed_frequency_processing(context[:iterations])

    assert result == "30550349"
  end

  @tag :challenge_pt2
  # XXX brute force
  test "(part 2) correctly processes personal challenge data", context do
    result =
      context[:message]
      |> FlawedFreqTx.run_extra_long_flawed_frequency_processing(context[:iterations])

    assert result == "00000000"
  end
end
