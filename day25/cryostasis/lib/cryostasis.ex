defmodule Cryostatis.WorldAffairs do

  # supervisor trees not required in this scenario
  # use Agent

  @spec initialise([integer]) :: pid
  def initialise(initial_state) do
    Agent.start_link(fn -> initial_state end, name: __MODULE__)
  end

  @spec handle_input_request() :: integer
  def handle_input_request() do
    buf_cs = Agent.get(__MODULE__, fn state -> state end)

    ascii_val =
      case buf_cs do
        [] -> 
          new_buf_cs =
            # input prompt already generated by IntCode output
            IO.gets("")
            |> String.split(~r//, trim: true)
            |> Enum.map(
              fn c -> <<i::8>> = c; i end
            )

          Agent.get_and_update(
            __MODULE__,
            fn _state ->
              [c | further_cs] = new_buf_cs
              {c, further_cs}
            end
          )

        _ ->
          Agent.get_and_update(
            __MODULE__,
            fn state ->
              [c | further_cs] = state
              {c, further_cs}
            end
          )
      end

    ascii_val
  end

  @spec handle_output_request(integer) :: :ok
  def handle_output_request(value) do
    IO.write(<<value::8>>)
    :ok
  end
end

defmodule Cryostasis do
  @moduledoc """
  navigate droid around spaceship with human input (text adventure)
  """

  alias Cryostatis.WorldAffairs

  @doc """
  (part 1)
  """
  @spec explore_interactively([integer]) :: :ok
  def discover_password_for_main_airlock(firmware) do
    {:ok, _pid} = WorldAffairs.initialise([])
    run_adventure_game(firmware)
  end

  @spec issue_command_sequence([integer], String.t()) :: :ok
  def issue_command_sequence(firmware, commands) do
    cmd_char_seq =
      commands
      |> String.split(~r//, trim: true)
      |> Enum.map(fn c -> <<i::8>> = c; i end)

    {:ok, _pid} = WorldAffairs.initialise(cmd_char_seq)
    run_adventure_game(firmware)
  end

  @spec run_adventure_game([integer]) :: :ok
  defp run_adventure_game(firmware) do
    task = Task.async(
      IntCodeBoost,
      :execute,
      [
        firmware,
        # both (in/out) from perspective of IntCode machine
        &WorldAffairs.handle_input_request/0,
        &WorldAffairs.handle_output_request/1
      ]
    )

    Task.await(task, :infinity)
    :ok
  end
end
